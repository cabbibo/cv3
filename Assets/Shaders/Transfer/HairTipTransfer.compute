
#pragma kernel Transfer

struct Vert{
    float3 pos;
    float3 vel;
    float3 nor;
    float3 tangent;
    float2 uv;
    float2 debug;
};

RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<Vert> _HairBuffer;

float3 _CameraUp;
float3 _CameraLeft;
float _Size;

int _NumVertsPerHair;


#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Transfer (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    int particleID = pID / 4;


    Vert p = _HairBuffer[particleID*_NumVertsPerHair+_NumVertsPerHair-1];
    Vert pD = _HairBuffer[particleID*_NumVertsPerHair+_NumVertsPerHair-2];

    int idInParticle = pID % 4;
    int row = idInParticle / 2;
    int col = pID % 2;

    float3 nor =p.nor;// normalize(p.pos - pD.pos);

    float3 l = normalize(cross(nor,float3(0,1,0)));
    float3 u = normalize(cross(nor,l));

    _VertBuffer[pID].tangent = l;
    l *= (float(col)-.5);
    u *= (float(row)-.5);

    float randSize = sin(float(particleID)*100) + 2 / 2;
    float3 fPos = p.pos + (l + u) *  _Size * randSize;

    float2 fUV = float2( float(row) , float(col) );

    _VertBuffer[pID].pos = fPos;
    _VertBuffer[pID].uv = fUV;
    _VertBuffer[pID].nor = p.nor;
    _VertBuffer[pID].debug = float2( float(particleID) , 1);


}
